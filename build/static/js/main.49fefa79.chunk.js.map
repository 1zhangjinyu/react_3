{"version":3,"sources":["components/Input.js","components/List.js","pages/Context.js","pages/TodoList.js","components/Control.js","pages/Demo02.js","pages/Demo01.js","taobao/Cart.js","taobao/Mytab.js","taobao/List.js","taobao/My.js","taobao/Home.js","taobao/Xiang.js","taobao/Search.js","taobao/App.js","pages/HOC.js","index.js"],"names":["Input","handleChange","e","setState","inpValue","target","value","state","htmlFor","id","this","type","onChange","onClick","props","addTodo","Component","List","renderTodos","done","toggle","removeTodo","todos","map","todo","idx","checked","dangerouslySetInnerHTML","__html","title","arr1","filter","item","arr2","length","Context","React","createContext","Demo02","Consumer","data","key","changeData","Demo01","style","width","height","backgroundColor","defaultProps","name","Cart","fontSize","color","className","history","goBack","Mytab","selectedTab","pathname","location","console","log","split","position","bottom","unselectedTintColor","tintColor","barTintColor","Item","icon","selectedIcon","selected","onPress","push","data-seed","withRouter","My","Home","imgHeight","setTimeout","placeholder","autoplay","infinite","val","href","display","src","alt","verticalAlign","onLoad","window","dispatchEvent","Event","Xiang","mode","onLeftClick","Search","autoFocusInst","focus","onCancel","ref","App","exact","path","component","render","to","withFetch","Com","url","Topic","fetch","then","res","json","disPlayName","content","ReactDOM","document","getElementById"],"mappings":"qPAwCeA,E,kDApCX,aAAc,IAAD,8BACT,gBAQJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,SAASF,EAAEG,OAAOC,SARjC,EAAKC,MAAM,CACPH,SAAS,IAHJ,E,qDAaH,IAAD,OAEL,OACI,6BACI,2BAAOI,QAAQ,OAAf,YACA,2BACAC,GAAG,MAGHH,MAAOI,KAAKH,MAAMH,SAClBO,KAAK,OAELC,SAAUF,KAAKT,eAGf,4BAAQY,QAAS,WAAK,EAAKC,MAAMC,QAAQ,EAAKR,MAAMH,YAApD,qB,GA9BIY,aCmCLC,E,4MAhCXC,YAAc,SAACC,GAAQ,IAAD,EACgB,EAAKL,MAAhCM,EADW,EACXA,OAAOC,EADI,EACJA,WACd,OAFkB,EACOC,MACZC,KAAI,SAACC,EAAKC,GACnB,GAAGN,GAAMK,EAAKL,KACV,OAAO,4BACH,2BAAON,QAAS,kBAAIO,EAAOK,IAAMC,QAASF,EAAKL,KAAMR,KAAK,aAC1D,0BAAMgB,wBAAyB,CAACC,OAAOJ,EAAKK,SAC5C,4BAAQhB,QAAS,kBAAIQ,EAAWI,KAAhC,qB,uDAOZ,IAAIK,EAAOpB,KAAKI,MAAMQ,MAAMS,QAAO,SAACC,GAAD,OAASA,EAAKb,QAC7Cc,EAAOvB,KAAKI,MAAMQ,MAAMS,QAAO,SAACC,GAAD,OAAQA,EAAKb,QAEhD,OACI,6BACI,uDAASW,EAAKI,QACd,4BACKxB,KAAKQ,aAAY,IAEtB,uDAASe,EAAKC,QACd,4BACKxB,KAAKQ,aAAY,S,GA5BnBF,aCEJmB,GCAQnB,Y,OCCDA,YFHNoB,IAAMC,iBGwBPC,EAtBA,WACX,OACI,6BACI,sCACA,4BACI,kBAAC,EAAQC,SAAT,MAEQ,SAAAC,GAAI,OAAEA,EAAKA,KAAKjB,KAAI,SAAAS,GAAI,OAAE,wBAAIS,IAAKT,GAAOA,SAKlD,kBAAC,EAAQO,SAAT,MAEQ,gBAAEG,EAAF,EAAEA,WAAF,OAAgB,4BAAQ7B,QAAS,kBAAI6B,EAAW,OAAhC,sBCblCC,EAAS,SAAC7B,GACZ,OACI,yBAAK8B,MAAO,CAACC,MAAM,IAAIC,OAAO,IAAIC,gBAAgB,SAC9C,sCACA,4BAEI,kBAAC,EAAQR,SAAT,MAEQ,SAAAC,GAAI,OACAA,EAAKA,KAAKjB,KAAI,SAAAS,GAAI,OAAE,wBAAIS,IAAKT,GAAOA,UAepD,kBAAC,EAAD,QASZW,EAAOK,aAAe,CAClBC,KAAK,OAGMN,I,wBC5BAO,EAXF,SAACpC,GACV,OACI,6BAEI,uBAAG8B,MAAO,CAACO,SAAS,IAAIC,MAAM,OAAQC,UAAU,4BAChD,4BAAQxC,QAASC,EAAMwC,QAAQC,QAA/B,kBCHNC,E,kDACL,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IACDP,MAAQ,CACdkD,YAAa,QAHK,E,qDAOT,IAAD,OACDC,EAAYhD,KAAKI,MAAM6C,SAAvBD,SAEP,OADAE,QAAQC,IAAIH,EAASI,MAAM,MACxBJ,EAASI,MAAM,KAAK5B,OAAO,EACtB,KAGR,yBAAKU,MAAQ,CACHmB,SAAU,QACnBlB,MAAO,OACEmB,OAAQ,IAEhB,kBAAC,IAAD,CACDC,oBAAoB,UACpBC,UAAU,QACVC,aAAa,SAEb,kBAAC,IAAOC,KAAR,CACEvC,MAAM,eACNY,IAAI,OACK4B,KAAM,uBAAGhB,UAAU,mCAC5BiB,aAAc,uBAAGjB,UAAU,oCAC3BkB,SAAuB,UAAbb,EACVc,QAAS,WACV,EAAK1D,MAAMwC,QAAQmB,KAAK,UAEvBC,YAAU,UAIZ,kBAAC,IAAON,KAAR,CACEC,KACD,uBAAGhB,UAAU,4BAEZiB,aACD,uBAAGjB,UAAU,2BAEZxB,MAAM,qBACNY,IAAI,OACJ8B,SAAuB,UAAbb,EACVc,QAAS,WACV,EAAK1D,MAAMwC,QAAQmB,KAAK,UAEvBC,YAAU,WAGZ,kBAAC,IAAON,KAAR,CACEC,KACD,uBAAGhB,UAAU,0BAEZiB,aACD,uBAAGjB,UAAU,uBAEZxB,MAAM,2BACNY,IAAI,OAEJ8B,SAAuB,UAAbb,EACVc,QAAS,WACV,EAAK1D,MAAMwC,QAAQmB,KAAK,YAKzB,kBAAC,IAAOL,KAAR,CACEC,KAAM,uBAAGhB,UAAU,uBACnBiB,aAAc,uBAAGjB,UAAU,+BAC3BxB,MAAM,2BACNY,IAAI,KACJ8B,SAAuB,QAAbb,EACVc,QAAS,WACV,EAAK1D,MAAMwC,QAAQmB,KAAK,gB,GA9ERrC,IAAMpB,WA2FX2D,cAAWnB,GCrFXvC,EATF,WACT,OACI,6BACI,uBAAG2B,MAAO,CAACO,SAAS,IAAIC,MAAM,OAAQC,UAAU,4BCM7CuB,EATJ,WACP,OACI,6BACI,uBAAGhC,MAAO,CAACO,SAAS,IAAIC,MAAM,OAAQC,UAAU,yBC0E7CwB,G,mNAtEbtE,MAAQ,CACNiC,KAAM,CAAC,IAAK,IAAK,IAAI,KACrBsC,UAAW,K,kEAEQ,IAAD,OAElBC,YAAW,WACT,EAAK5E,SAAS,CACZqC,KAAM,CAAC,8BAA+B,sCAAuC,8BAA8B,2CAE5G,O,+BAGK,IAAD,OAEP,OACE,6BACA,6BACE,yBAAKa,UAAU,OACb,wCAAc,2BAAOxC,QAAS,WAAK,EAAKC,MAAMwC,QAAQmB,KAAK,iBAAmBpB,UAAU,MAAM1C,KAAK,OAAOqE,YAAY,0CAGxH,kBAAC,IAAD,CACEC,UAAU,EACVC,UAAQ,GAIPxE,KAAKH,MAAMiC,KAAKjB,KAAI,SAAA4D,GAAG,OACtB,uBACE1C,IAAK0C,EACLC,KAAK,cACLxC,MAAO,CAAEyC,QAAS,eAAgBxC,MAAO,OAAQC,OAAQ,EAAKvC,MAAMuE,YAEpE,yBACEQ,IAAG,6CAAwCH,EAAxC,QACHI,IAAI,GACJ3C,MAAO,CAAEC,MAAO,OAAQ2C,cAAe,OACvCC,OAAQ,WAENC,OAAOC,cAAc,IAAIC,MAAM,WAC/B,EAAKzF,SAAS,CAAE2E,UAAW,iBAMrC,yBAAKzB,UAAU,SAjCJ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAkClB9B,KAAI,SAACS,GACb,OAAQ,yBAAKqB,UAAU,SAASxC,QAAS,kBAAI,EAAKC,MAAMwC,QAAQmB,KAAK,iBAE3D,yBAAKa,IAAI,0GACT,wCACA,4FAOhB,yBAAKjC,UAAU,c,GA7DFjB,IAAMpB,YCMnB6E,G,yDACF,WAAY/E,GAAQ,IAAD,8BACf,cAAMA,IACDP,MAAQ,CACTkD,YAAa,QAHF,E,qDAOT,IAAD,OACGC,EAAahD,KAAKI,MAAM6C,SAAxBD,SAKR,OACI,6BACI,yBAAKL,UAAU,QACX,kBAAC,IAAD,CACIyC,KAAK,QAELzB,KAAM,kBAAC,IAAD,CAAM1D,KAAK,SACjBoF,YAAa,kBAAM,EAAKjF,MAAMwC,QAAQmB,KAAK,OAJ/C,6BAWJ,6BACI,yBAAK7B,MAAO,CAACC,MAAM,QAASyC,IAAI,4GAEpC,yBAAK1C,MAAO,CACRmB,SAAU,QACVlB,MAAO,OACPmB,OAAQ,IAER,kBAAC,IAAD,CACIC,oBAAoB,UACpBC,UAAU,QACVC,aAAa,SAEb,kBAAC,IAAOC,KAAR,CACIvC,MAAM,eACNY,IAAI,OACJ4B,KAAM,uBAAGhB,UAAU,yBACnBiB,aAAc,uBAAGjB,UAAU,yBAC3BkB,SAAuB,UAAbb,EACVc,QAAS,WACL,EAAK1D,MAAMwC,QAAQmB,KAAK,UAE5BC,YAAU,UAGd,kBAAC,IAAON,KAAR,CACIC,KACI,uBAAGhB,UAAU,uBAEjBiB,aACI,uBAAGjB,UAAU,uBAEjBxB,MAAM,eACNY,IAAI,OACJ8B,SAAuB,UAAbb,EACVc,QAAS,WACL,EAAK1D,MAAMwC,QAAQmB,KAAK,UAE5BC,YAAU,WAGd,kBAAC,IAAON,KAAR,CACIC,KACI,uBAAGhB,UAAU,2BAEjBiB,aACI,uBAAGjB,UAAU,2BAEjBxB,MAAM,eACNY,IAAI,UAEJ8B,SAAuB,aAAbb,EACVc,QAAS,WACL,EAAK1D,MAAMwC,QAAQmB,KAAK,eAIhC,kBAAC,IAAOL,KAAR,CAAaC,KAAM,4BAAQhB,UAAU,QAAlB,oCACnB,kBAAC,IAAOe,KAAR,CAAaC,KAAM,4BAAQhB,UAAU,OAAlB,qC,GAtFvBrC,cAkGL2D,cAAWkB,GChGXG,E,kLAVXtF,KAAKuF,cAAcC,U,+BAEX,IAAD,OACP,OAAQ,6BACN,kBAAC,IAAD,CAAWlB,YAAY,eAAKmB,SAAU,WAAK,EAAKrF,MAAMwC,QAAQmB,KAAK,MAAO2B,IAAK,SAAAA,GAAG,OAAI,EAAKH,cAAgBG,KAC3G,kBAAC,IAAD,W,GAPehE,IAAMpB,WCkCZqF,EAzBH,WACX,OAAO,kBAAC,IAAD,KACN,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAW3B,IADtC,UAEC,kBAAC,IAAD,CAAO0B,KAAK,QAAQC,UAAWtD,IAC/B,kBAAC,IAAD,CAAOqD,KAAK,QAAQC,UAAWvF,IAC/B,kBAAC,IAAD,CAAOsF,KAAK,MAAMC,UAAW5B,IAC7B,kBAAC,IAAD,CAAO2B,KAAK,cAAcC,UAAWX,IACrC,kBAAC,IAAD,CAAOU,KAAK,eAAeC,UAAWR,IAKtC,kBAAC,IAAD,CAAOS,OAAQ,kBAAI,kBAAC,IAAD,CAAUC,GAAG,cAQjC,kBAAC,EAAD,QC5BIC,EAAY,SAACC,EAAIC,GAAO,IACpBC,EADmB,kDAErB,aAAc,IAAD,8BACT,gBACKvG,MAAQ,CACTiC,KAAK,IAHA,EAFQ,gEAQD,IAAD,OACfuE,MAAMF,GACLG,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GAAG,OAAE,EAAK9G,SAAS,CAACqC,KAAKyE,EAAIzE,YAXlB,+BAcjB,OAAO,kBAACoE,EAAD,iBAASlG,KAAKI,MAAd,CAAqB0B,KAAM9B,KAAKH,MAAMiC,YAd5B,GACLxB,aAiBpB,OADA8F,EAAMK,YAAN,oBAAiCP,EAAI3D,KAArC,KACO6D,GAWWH,GARb,SAAC7F,GACN,OACI,6BACI,2CAAOA,EAAMmC,MACb,yBAAKtB,wBAAyB,CAACC,OAAOd,EAAM0B,KAAK4E,cAI1B,6DAYhBT,GAVT,SAAC7F,GAGP,OAFA8C,QAAQC,IAAI/C,GACZ8C,QAAQC,IAAI/C,EAAM0B,MACX,4BAEC1B,EAAM0B,KAAKjB,KAAI,SAACS,GAAD,OAAQ,4BAAKA,EAAKH,aAKb,qC,aC/BhCwF,IAASZ,OACP,kBAAC,EAAD,MACAa,SAASC,eAAe,U","file":"static/js/main.49fefa79.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n    /**constructor是新加的 */\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:''\r\n        }\r\n    }\r\n    // componentDidMount(){       // 页面挂载完时调用\r\n    //     this.input.focus();    // 页面加载成功后获得焦点\r\n    // }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n   \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\">todoList</label>\r\n                <input \r\n                id=\"inp\" \r\n                // ref={info=>this.input = info}\r\n                // value={this.props.inpValue}     // 如果没有constructor中的inpvalue，则应用this.props.inpValue\r\n                value={this.state.inpValue} \r\n                type=\"text\" \r\n                // onChange={this.props.handleChange}    //因为把handleChange移到了Input里面，直接this.handleChange\r\n                onChange={this.handleChange}\r\n                />\r\n                {/* <button onClick={this.props.addTodo}>添加</button> */}\r\n                <button onClick={()=>{this.props.addTodo(this.state.inpValue)}}>添加</button>\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass List extends Component {\r\n\r\n    /**移到List里面 */\r\n    renderTodos = (done)=>{\r\n        const {toggle,removeTodo,todos} = this.props;\r\n        return todos.map((todo,idx)=>{        \r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input onClick={()=>toggle(idx)} checked={todo.done} type=\"checkbox\"/>\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>              \r\n                    <button onClick={()=>removeTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n            \r\n        })\r\n    }\r\n    render() {\r\n        let arr1 = this.props.todos.filter((item)=>!item.done)\r\n        let arr2 = this.props.todos.filter((item)=>item.done)\r\n\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { Component } from 'react';\r\nimport Input from '../components/Input';\r\nimport List from '../components/List';\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    addTodo = (inpValue)=>{\r\n        if(inpValue==''){          // 内容为空时，不添加\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       // 扩展\r\n            ]\r\n        })\r\n        // this.setState({inpValue:''});       // 保证每次添加完后，文本框内容为空\r\n    }\r\n    componentDidUpdate(preProps,preState){\r\n        // console.log(111)\r\n        if (preState.todos !== this.state.todos) {      //输入框输入时不进行本地存储（使用componentDidUpdate）\r\n            localStorage.setItem('todos', JSON.stringify(this.state.todos));\r\n        }\r\n    }\r\n    removeTodo = (idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        })\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n   \r\n     render() {       \r\n        const {todos} = this.state;\r\n        return (\r\n            <div>\r\n                <Input type=\"text\" addTodo={this.addTodo} handleChange={this.handleChange}/>\r\n                <List todos={todos} renderTodos={this.renderTodos} toggle={this.toggle} removeTodo={this.removeTodo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList; \r\n\r\n","import React, { Component } from 'react';\r\nimport './control.css';\r\n\r\n\r\n// 组件名首字母一定要大写\r\nclass Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[         // 默认值，可以不写\r\n                {title:'1',done:true},\r\n                {title:'2',done:false},\r\n                {title:'3',done:false},\r\n                {title:'4',done:true}\r\n\r\n            ]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    addTodo = ()=>{\r\n        // 第一种方法\r\n        // this.state.todos.push({title:this.state.inpValue})\r\n        // this.setState({\r\n        //     todos:this.state.todos\r\n        // })\r\n\r\n        // 第二种方法\r\n        if(this.state.inpValue==''){          // 内容为空时，不添加\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       // 扩展\r\n            ]\r\n        })\r\n        this.setState({inpValue:''});       // 保证每次添加后，文本框内容为空\r\n    }\r\n    removeTodo = (idx)=>{\r\n        // 第一种方法\r\n        // this.state.todos.splice(idx,1);      // 从下标为idx项开始删，删除1个\r\n        // this.setState({todos:this.state.todos});\r\n\r\n        // 第二种方法（深拷贝）\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n\r\n        // 第三种方法\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        })\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{        // 此处的小括号只是一个包裹作用\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input onClick={()=>this.toggle(idx)} checked={todo.done} type=\"checkbox\"/>\r\n                    {/* <span>{todo.title}</span> */}         {/**输的是什么，出来的是什么 */}\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>      {/*对于输入的是带标签的内容(<h>123</h>)，直接是里面内容(123)，不带标签*/}           \r\n                    <button onClick={()=>this.removeTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n            \r\n        })\r\n    }\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        this.input.focus();    // 页面加载成功后获得焦点\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos));\r\n\r\n    }\r\n     render() {          // 只要执行一次setState，就会重新执行一次render\r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter((item,index)=>!item.done)\r\n        // let arr2 = todos.filter((item,index)=>item.done)\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">todoList</label>\r\n                <input \r\n                id=\"inp\" \r\n                ref={info=>this.input = info}\r\n                value={inpValue} \r\n                type=\"text\" \r\n                onChange={this.handleChange}\r\n                />\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul style={{color:3>2?'red':'green',fontSize:'20px'}}>\r\n                    {this.renderTodos(false)}     {/**差值表达式，放在大括号里 */}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n\r\n                {/* 条件渲染 */}\r\n                {/* <button>{2>3?'登录':'注册'}</button> */}\r\n                {/* \r\n                    2>3\r\n                    ?<button>红</button>\r\n                    :<button>绿</button>\r\n                */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Control; \r\n\r\n","import React from 'react'\r\nimport Context from \"./Context\";\r\n\r\n\r\nconst Demo02 = () => {\r\n    return (\r\n        <div>\r\n            <h2>Demo02</h2>\r\n            <ul>\r\n                <Context.Consumer>        \r\n                    {\r\n                        data=>data.data.map(item=><li key={item}>{item}</li>)\r\n                    }\r\n                </Context.Consumer>\r\n                \r\n                {/* App.js中变成类组件 */}\r\n                <Context.Consumer>\r\n                    {\r\n                        ({changeData})=><button onClick={()=>changeData(123)}>点击</button>\r\n                    }\r\n                </Context.Consumer>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo02\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from \"./Context\";\r\nimport Demo02 from './Demo02';\r\n\r\nconst Demo01 = (props) => {\r\n    return (\r\n        <div style={{width:500,height:500,backgroundColor:'pink'}}>\r\n            <h2>Demo01</h2>\r\n            <ul>\r\n                {/*只要数据拿到了，可放在任何位置*/}\r\n                <Context.Consumer>        \r\n                    {\r\n                        data=>         // 如果返回值很简单，可以去掉‘{}’和‘return’\r\n                            data.data.map(item=><li key={item}>{item}</li>)\r\n                    }\r\n\r\n                {/** \r\n                    // {\r\n                    // return <li>\r\n                    //     {data.data}\r\n                    // </li>\r\n                    // }\r\n                */}\r\n                </Context.Consumer>\r\n            </ul>\r\n\r\n            {/* {props.name} */}\r\n            \r\n            <Demo02 />\r\n        </div>\r\n    )\r\n}\r\n\r\nDemo01.propTypes={\r\n    name:PropTypes.string.isRequired      // isRequired表示属性是必须的，必须传参\r\n}\r\n\r\nDemo01.defaultProps = {\r\n    name:'Tom'\r\n}\r\n\r\nexport default Demo01\r\n\r\n\r\n\r\n// 快捷键\r\n// rafc\r\n// rafce\r\n// rcc\r\n\r\n","import React from 'react'\r\n\r\n\r\nconst Cart = (props) => {\r\n    return (\r\n        <div>\r\n            \r\n            <i style={{fontSize:100,color:'red'}} className='iconfont icon-gouwuche1'></i>\r\n            <button onClick={props.history.goBack}>返回</button>\r\n            \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import React from 'react'\r\nimport { Button,TabBar } from 'antd-mobile';\r\nimport {withRouter} from 'react-router-dom'\r\nimport {BrowserRouter as Router,Route,NavLink,Switch,Redirect} from 'react-router-dom';\r\n\r\nclass Mytab extends React.Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\t  this.state = {\r\n\t\tselectedTab: 'home'      \r\n\t  };\r\n\t}\r\n  \r\n\trender() {\r\n\t\tconst {pathname} = this.props.location;\r\n\t\tconsole.log(pathname.split('/'));\r\n\t\tif(pathname.split('/').length>2){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn (\r\n\t\t<div style= {{\r\n            position: 'fixed',      // position: 'fixed!important' ----“!important”优先级最高\r\n\t\t\twidth: '100%', \r\n            bottom: 0 \r\n            }}>\r\n\t\t  <TabBar\r\n\t\t\tunselectedTintColor=\"#949494\"\r\n\t\t\ttintColor=\"black\"\r\n\t\t\tbarTintColor=\"white\"\r\n\t\t  >\r\n\t\t\t<TabBar.Item\r\n\t\t\t  title=\"首页\"\r\n\t\t\t  key=\"home\"\r\n              icon={<i className=\"iconfont icon-Homehomepagemenu\"></i>}\r\n\t\t\t  selectedIcon={<i className=\"iconfont icon-Homehomepagemenu1\"></i>}\r\n\t\t\t  selected={pathname === '/home'}\r\n\t\t\t  onPress={() => {\r\n\t\t\t\tthis.props.history.push('/home')\r\n\t\t\t  }}\r\n\t\t\t  data-seed=\"logId\"\r\n\t\t\t>\r\n\t\t\t  {/* 首页 */}\r\n\t\t\t</TabBar.Item>\r\n\t\t\t<TabBar.Item\r\n\t\t\t  icon={\r\n\t\t\t\t<i className=\"iconfont icon-gouwuche1\"></i>\r\n\t\t\t  }\r\n\t\t\t  selectedIcon={\r\n\t\t\t\t<i className=\"iconfont icon-gouwuche\"></i>\r\n\t\t\t  }\r\n\t\t\t  title=\"购物车\"\r\n\t\t\t  key=\"cart\"\r\n\t\t\t  selected={pathname === '/cart'}\r\n\t\t\t  onPress={() => {\r\n\t\t\t\tthis.props.history.push('/cart')\r\n\t\t\t  }}\r\n\t\t\t  data-seed=\"logId1\"\r\n\t\t\t>\r\n\t\t\t</TabBar.Item>\r\n\t\t\t<TabBar.Item\r\n\t\t\t  icon={\r\n\t\t\t\t<i className=\"iconfont icon-dingdan\"></i>\r\n\t\t\t  }\r\n\t\t\t  selectedIcon={\r\n\t\t\t\t<i className=\"iconfont icon-icon\"></i>\r\n\t\t\t  }\r\n\t\t\t  title=\"订单列表\"\r\n\t\t\t  key=\"list\"\r\n\t\t\t//   dot\r\n\t\t\t  selected={pathname === '/list'}\r\n\t\t\t  onPress={() => {\r\n\t\t\t\tthis.props.history.push('/list')\r\n\t\t\t  }}\r\n\t\t\t>\r\n\t\t\t  {/* 订单列表 */}\r\n\t\t\t</TabBar.Item>\r\n\t\t\t<TabBar.Item\r\n\t\t\t  icon={<i className=\"iconfont icon-wode\"></i>}\r\n\t\t\t  selectedIcon={<i className=\"iconfont icon-wodedangxuan\"></i>}\r\n\t\t\t  title=\"我的淘宝\"\r\n\t\t\t  key=\"my\"\r\n\t\t\t  selected={pathname === '/my'}\r\n\t\t\t  onPress={() => {\r\n\t\t\t\tthis.props.history.push('/my')\r\n\t\t\t  }}\r\n\t\t\t>\r\n\t\t\t  {/* 我的淘宝 */}\r\n\t\t\t</TabBar.Item>\r\n\t\t  </TabBar>\r\n\t\t</div>\r\n\t  );\r\n\t}\r\n  }\r\n\r\n\r\n\r\nexport default withRouter(Mytab);","import React from 'react'\r\n\r\nconst List = () => {\r\n    return (\r\n        <div>\r\n            <i style={{fontSize:100,color:'red'}} className='iconfont icon-dingdan'></i>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\n\r\nconst My = () => {\r\n    return (\r\n        <div>\r\n            <i style={{fontSize:100,color:'red'}} className='iconfont icon-wode'></i>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default My\r\n","import { Button,Carousel, SearchBar, WingBlank } from 'antd-mobile'\r\nimport React from 'react'\r\nimport {HashRouter as Router,Route,NavLink,Switch,Redirect,withRouter} from 'react-router-dom';\r\n\r\nimport './home.css'\r\n// import img from '../xx.xxx.png'\r\n\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    data: ['1', '2', '3','4'],\r\n    imgHeight: 176,\r\n  }\r\n  componentDidMount() {\r\n    // simulate img loading\r\n    setTimeout(() => {\r\n      this.setState({\r\n        data: ['TB15tIjGVXXXXcoapXXSutbFXXX', 'TB1CWf9KpXXXXbuXpXXSutbFXXX.jpg_q50', 'TB15tIjGVXXXXcoapXXSutbFXXX','TB1CWf9KpXXXXbuXpXXSutbFXXX.jpg_q50'],\r\n      });\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    let xiangarr = [1,2,3,4,5,6,7,8,9,10];\r\n    return (\r\n      <div> \r\n      <div>\r\n        <div className=\"top\">\r\n          <span>淘</span><input onClick={()=>{this.props.history.push('/home/search')}}  className=\"inp\" type=\"text\" placeholder=\"寻找宝贝店铺\" />\r\n        </div>\r\n        \r\n        <Carousel\r\n          autoplay={true}\r\n          infinite\r\n          // beforeChange={(from, to) => console.log(`slide from ${from} to ${to}`)}\r\n          // afterChange={index => console.log('slide to', index)}\r\n        >\r\n          {this.state.data.map(val => (\r\n            <a\r\n              key={val}\r\n              href=\"/home/xiang\"\r\n              style={{ display: 'inline-block', width: '100%', height: this.state.imgHeight }}\r\n            >\r\n              <img\r\n                src={`https://aecpm.alicdn.com/simba/img/${val}.jpg`}\r\n                alt=\"\"\r\n                style={{ width: '100%', verticalAlign: 'top' }}\r\n                onLoad={() => {\r\n                  // fire window resize event to change height\r\n                  window.dispatchEvent(new Event('resize'));\r\n                  this.setState({ imgHeight: 'auto' });\r\n                }}\r\n              />\r\n            </a>\r\n          ))}\r\n        </Carousel>\r\n        <div className=\"goods\">\r\n          {xiangarr.map((item)=>{\r\n            return (<div className=\"detail\" onClick={()=>this.props.history.push('/home/xiang')}>\r\n\r\n                      <img src=\"http://gw1.alicdn.com/bao/uploaded/i4/4016360826/O1CN01l8anxz1HyLkbnxg5n_!!4016360826.jpg_250x250.jpg\" />  \r\n                      <p>￥123</p>\r\n                      <p>蓝屿 布吉岛生日蛋糕</p>                    \r\n\r\n                    </div>)\r\n          })}\r\n        </div> \r\n                 \r\n      </div>\r\n      <div className=\"kong\"></div>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\nimport {NavBar,Icon} from 'antd-mobile'\r\nimport {withRouter} from 'react-router-dom'\r\nimport { Button,TabBar } from 'antd-mobile';\r\nimport './xiang.css'\r\n\r\n\r\n// const Xiang = (props) => {\r\n//     return (\r\n        \r\n//     )\r\n// }\r\n\r\n\r\nclass Xiang extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedTab: 'shop'\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { pathname } = this.props.location;\r\n        // console.log(pathname.split('/'));\r\n        // if (pathname.split('/').length > 2) {\r\n        //     return null;\r\n        // }\r\n        return (\r\n            <div>\r\n                <div className=\"back\">\r\n                    <NavBar\r\n                        mode=\"light\"\r\n                        \r\n                        icon={<Icon type=\"left\" />}\r\n                        onLeftClick={() => this.props.history.push('/')}\r\n                        // rightContent={[\r\n                        //     <Icon key=\"0\" type=\"search\" style={{ marginRight: '16px' }} />,\r\n                        //     <Icon key=\"1\" type=\"ellipsis\" />,\r\n                        // ]}\r\n                    >商品详情</NavBar>\r\n                </div>\r\n                <div>\r\n                    <img style={{width:\"100%\"}} src=\"http://img.alicdn.com/imgextra/i4/4016360826/O1CN01l8anxz1HyLkbnxg5n_!!4016360826.jpg_640x640q80_.webp\" />\r\n                </div>\r\n                <div style={{\r\n                    position: 'fixed',      // position: 'fixed!important' ----“!important”优先级最高\r\n                    width: '100%',\r\n                    bottom: 0\r\n                }}>\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"black\"\r\n                        barTintColor=\"white\"\r\n                    >\r\n                        <TabBar.Item\r\n                            title=\"店铺\"\r\n                            key=\"shop\"\r\n                            icon={<i className=\"iconfont icon-dianpu\"></i>}\r\n                            selectedIcon={<i className=\"iconfont icon-dianpu\"></i>}\r\n                            selected={pathname === '/shop'}\r\n                            onPress={() => {\r\n                                this.props.history.push('/shop')\r\n                            }}\r\n                            data-seed=\"logId\"\r\n                        >\r\n                        </TabBar.Item>\r\n                        <TabBar.Item\r\n                            icon={\r\n                                <i className=\"iconfont icon-kefu\"></i>\r\n                            }\r\n                            selectedIcon={\r\n                                <i className=\"iconfont icon-kefu\"></i>\r\n                            }\r\n                            title=\"客服\"\r\n                            key=\"kefu\"\r\n                            selected={pathname === '/kefu'}\r\n                            onPress={() => {\r\n                                this.props.history.push('/kefu')\r\n                            }}\r\n                            data-seed=\"logId1\"\r\n                        >\r\n                        </TabBar.Item>\r\n                        <TabBar.Item\r\n                            icon={\r\n                                <i className=\"iconfont icon-shoucang\"></i>\r\n                            }\r\n                            selectedIcon={\r\n                                <i className=\"iconfont icon-shoucang\"></i>\r\n                            }\r\n                            title=\"收藏\"\r\n                            key=\"collect\"\r\n                            //   dot\r\n                            selected={pathname === '/collect'}\r\n                            onPress={() => {\r\n                                this.props.history.push('/collect')\r\n                            }}\r\n                        >\r\n                        </TabBar.Item>\r\n                        <TabBar.Item icon={<button className=\"shop\">加入购物车</button>}></TabBar.Item>\r\n                        <TabBar.Item icon={<button className=\"buy\">立即购买</button>}></TabBar.Item>\r\n                    </TabBar>\r\n                    \r\n                    \r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withRouter(Xiang)\r\n","import React from 'react'\r\n\r\nimport { SearchBar, Button, WhiteSpace, WingBlank } from 'antd-mobile';\r\n\r\nclass Search extends React.Component {\r\n  componentDidMount() {\r\n    this.autoFocusInst.focus();\r\n  }\r\n  render() {\r\n    return (<div>\r\n      <SearchBar placeholder=\"宝贝\" onCancel={()=>{this.props.history.push('/')}} ref={ref => this.autoFocusInst = ref} />\r\n      <WhiteSpace />\r\n      \r\n    </div>);\r\n  }\r\n}\r\nexport default Search;","import React from 'react'\r\nimport { Button,SearchBar,TabBar } from 'antd-mobile';\r\nimport {HashRouter as Router,Route,NavLink,Switch,Redirect} from 'react-router-dom';\r\nimport Cart from './Cart';\r\nimport Mytab from './Mytab';\r\nimport List from './List';\r\nimport My from './My';\r\nimport Home from './Home';\r\nimport Xiang from './Xiang';\r\nimport Search from \"./Search\";\r\n\r\n\r\n\r\nconst App = ()=> {\r\n\treturn <Router>\r\n\t\t<Switch>\r\n\t\t\t<Route exact path='/home' component={Home} />       {/**所匹配的地址要与打开GitHub后.io后面的一样，上传到仓库后才能打开 */}\r\n\t\t\t<Route path='/cart' component={Cart} />\r\n\t\t\t<Route path='/list' component={List} />\r\n\t\t\t<Route path='/my' component={My} />\r\n\t\t\t<Route path='/home/xiang' component={Xiang} />\r\n\t\t\t<Route path='/home/search' component={Search} />\r\n\t\t\t\r\n\t\t\t{/**或者 */}\r\n\t\t\t{/* <Route component={Home} />  */}\r\n\t\t\t{/**或者采用重定向 */}                     \r\n\t\t\t<Route render={()=><Redirect to=\"/home\" />} />      \r\n\r\n\t\t\t\r\n\r\n\t\t\t\r\n\r\n\r\n\t\t</Switch>\r\n\t\t<Mytab />\r\n\t</Router> \r\n  }\r\n\r\nexport default App;","// higher order component ---HOC\r\n\r\nimport React, { Component } from 'react'\r\n\r\n\r\n// 下面两个组件的重用代码，withFetch是一个高阶组件.返回值是一个类组件\r\nconst withFetch = (Com,url)=>{\r\n    class Topic extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data:[]\r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then(res=>res.json())\r\n            .then(res=>this.setState({data:res.data}))\r\n        }\r\n        render(){\r\n            return <Com {...this.props} data={this.state.data}/>    // {...this.props} 将一个对象（如name:Tom,age:10）转换成“属性=属性名”的形式（name=Tom,age=10）\r\n        }\r\n    }\r\n    Topic.disPlayName = `withFetch(${Com.name})`\r\n    return Topic;\r\n}\r\n\r\nconst De=(props)=>{\r\n    return (\r\n        <div>\r\n            <h1>标题{props.name}</h1>\r\n            <div dangerouslySetInnerHTML={{__html:props.data.content}}></div>\r\n        </div>\r\n    )\r\n}\r\nexport const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312')\r\n\r\nconst Ho =(props)=> {\r\n    console.log(props)\r\n    console.log(props.data)\r\n    return <ul>\r\n        {\r\n            props.data.map((item)=><li>{item.title}</li>)\r\n        }\r\n    </ul>\r\n\r\n}\r\nexport const HOC = withFetch(Ho,'https://cnodejs.org/api/v1/topics')\r\n\r\n\r\nexport default HOC;\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './pages/TodoList';\nimport Home from './pages/Home';\nimport Control from './components/Control';\nimport Demo01 from './pages/Demo01';\nimport App from './taobao/App';\nimport HOC,{Detail} from './pages/HOC';\nimport Hook from './pages/Hook';\nimport Context from './pages/Context';\nimport 'antd-mobile/dist/antd-mobile.css';  // or 'antd-mobile/dist/antd-mobile.less'\n// import App from './02/App';\n// import App from './reduxDemo/App'\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n); \n\n// ReactDOM.render(\n//   // <Home0/>,\n//   // <Control />,\n//   // <Demo01 name='13'/>,\n\n//   // <div>\n//   //   <HOC /><Detail name='Tom'/>\n//   // </div>,\n//   // <Context.Provider value='123'>\n//   //   <Hook />\n//   // </Context.Provider>,\n//   document.getElementById('root')\n// ); \n\n\n// // homework-1-todolist\n// ReactDOM.render(\n//   <TodoList />,\n//   document.getElementById('root')\n// ); \n\n\n\n\n\n\n// // List被引入到普通组件中的List.js中\n// let List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map((item)=><li key={item.id}>{item.title}</li>)\n//     }\n//   </ul>\n// }\n\n/*\n// Buttons被引入到普通组件中的Buttons.js中\nconst Buttons = ()=>{\n  const btns = [1,2,3,4,5];\n  const handleCLick = (num)=>{\n    // num表示事件对象，事件触发函数的第一个参数\n    console.log(num);\n  }\n  return <div>\n    {\n      btns.map((item)=><button key={item} onClick={()=>handleCLick(item)}>{item}</button>)   //key必须是独一无二的，并且随着浏览器的刷新不会改变\n    }\n  </div>\n}\n*/\n\n\n// // 类Home已引入到pages（大组件）中的Home.js中\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//     // 通过 bind 绑定 this\n//     // this.handleCLick = this.handleCLick.bind(this);\n//     console.log('construct');\n//   }\n//   componentDidMount(){\n//     console.log('didmount');\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       console.log(data);\n//       this.setState({data})\n//     })\n//   }\n\n//   // handleCLick(){\n//   //   console.log(this);    // undefined,类的方法默认是不会绑定 this 的\n//   //   // console.log('hello');\n//   // }\n\n\n//   // // 箭头函数绑定this\n//   // handleCLick=()=>{\n//   //   // console.log(this);\n//   // }\n\n//   getData=(page)=>{\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page)\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n\n//   render(){\n//     console.log('render');\n//     const { data } = this.state;\n//     const btns = [1,2,3,4,5];\n//     return <div>\n//       {/* <button onClick={this.handleCLick}>click</button> */}\n//       {/* <Buttons /> */}\n//       {\n//         btns.map((item)=><button key={item} onClick={()=>this.getData(item)}>{item}</button>)   //key必须是独一无二的，并且随着浏览器的刷新不会改变\n//       }\n//       <List data={data}/>\n//     </div>\n//   }\n// }\n\n \n\n\n\n\n\n\n\n\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[1,2,3]\n//     }\n//     setTimeout(() => {\n//       this.setState({data:[5,6,7,8,9]})\n//     }, 500);\n//   }\n//   render(){\n//     return <ul>\n//       {\n//         this.state.data.map(\n//           (item)=><li>{item}</li>\n//         )\n//       }\n//     </ul>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home/>,\n//   document.getElementById('root')\n// );  \n\n\n\n\n\n// let ele = <h1 id=\"title\">hello react</h1>;\n// let ele = React.createElement('h1',{id:'title'},'hello react')\n\n\n// setInterval(()=>{\n//   let ele = <h1 id=\"title\" className=\"tit\">\n//   <div>当前时间</div>\n//   {new Date().toLocaleString()}\n//   </h1>;\n//   ReactDOM.render(\n//     ele,\n//     document.getElementById('root')\n//   );\n// },1000)\n\n\n// 组件声明\n\n// // UI（展示、木偶）组件---函数组件\n// function App(props){\n//   console.log(props);\n//   const{title,id}=props;\n//   return <div>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//     {/* <div>{props.title}</div> */}\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title='可以传任意值' id='app'/>,\n//   document.getElementById('root')\n// );\n\n// // 智能组件---类组件\n/*\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     // 声明状态\n//     this.state={\n//       // name:'xz',\n//       name:new Date().toLocaleString()\n//     }\n//     // setTimeout(()=>{\n//     //   // this.state.name='abc';      //改不了\n//     //   this.setState({name:'abcd'})\n//     // },1000)\n//     setInterval(() => {\n//       this.setState({name:new Date().toLocaleString()})\n//     }, 1000);\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Demo title='可以传任意值' id='app'/>,\n//   document.getElementById('root')\n// );\n*/\n\n\n//将jsx对象渲染到DOM中\n/*\nlet ReactDOM = {\n  render(eleObj,container){\n    //解构\n    const { type,props } = eleObj;\n    //创建第一层节点\n    let ele = document.createElement(type);\n    // 遍历属性对象，将属性加到第一层节点对象上\n    for (const prop in props) {\n      if(prop == 'children'){\n        if(typeof props.children == 'string'){\n          const textNode = document.createTextNode(props[prop]);\n          ele.appendChild(textNode);\n          break;\n          // continue;\n        }\n        // 将第一层节点对象的子元素添加进去\n        props.children.forEach((child)=>{\n          if(typeof child == 'string'){\n            const textNode = document.createTextNode(child);\n            ele.appendChild(textNode);\n          }else{\n            ReactDOM.render(child,ele);\n          }\n        })\n        \n      }else{\n        ele[prop]=props[prop];\n      }\n    }\n\n    // 将第一层DOM节点加到container中\n    container.appendChild(ele);\n  }\n}\nReactDOM.render(\n  ele,\n  document.getElementById('root')\n);\n*/\n\n\n/*\n\n    1. 原生js，DOM操作（jQ）\n    2. react:开发效率高，性能高\n    3. 环境搭建、创建一个项目、运行\n    4. JSK语法\n*/\n// 按住alt，鼠标点击\n// alt shift + 上下键   复制一行\n// alt + 上下键   移动一行\n// Ctrl + 左右键     一个单词一个单词的移动\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L    选中所有匹配的单词\n\n\n\n\n/**\n * Reactjs\n * \n * 安装 node(npm) npm i(install) packageName----下载安装包，例：\n *   npm react-router-dom\n *   npm i antd-mobile@+版本号\n *   npm i redux react-redux redux-thunk （用空格隔开想安装的多个包名）\n * \n * (npx) create-react-app proName----最先应下载的包\n * \n * 组件化（\n *   UI组件：展示，通过属性props传递数据\n *   智能组件：状态（state、setState）、生命周期（componentDidMount--只执行一次，render--每次更新都会执行）\n * ）\n * \n * hooks：函数内组件，也可声明状态，更新状态（useState）\n *\n */"],"sourceRoot":""}